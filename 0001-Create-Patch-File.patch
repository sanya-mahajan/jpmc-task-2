From 97ea92667ae3260e5104e014eca5a448b64abece Mon Sep 17 00:00:00 2001
From: sanya-mahajan <sanyamahajan08@gmail.com>
Date: Tue, 17 Jan 2023 18:13:49 +0530
Subject: [PATCH] Create Patch File

---
 server.py     | 122 +++++++++++++++++++++-----------------------------
 src/App.tsx   |  29 ++++++++----
 src/Graph.tsx |  15 +++++--
 3 files changed, 83 insertions(+), 83 deletions(-)

diff --git a/server.py b/server.py
index 68f4659..c6d3091 100644
--- a/server.py
+++ b/server.py
@@ -18,9 +18,9 @@
 #  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 #  DEALINGS IN THE SOFTWARE.
 
-# from itertools import izip
-from random import normalvariate, random
-from datetime import timedelta, datetime
+#from itertools import izip
+from random    import normalvariate, random
+from datetime  import timedelta, datetime
 
 import csv
 import dateutil.parser
@@ -31,9 +31,9 @@ import json
 import re
 import threading
 
-# from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
+#from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
 import http.server
-from socketserver import ThreadingMixIn
+from socketserver   import ThreadingMixIn
 
 ################################################################################
 #
@@ -41,21 +41,20 @@ from socketserver import ThreadingMixIn
 
 # Sim params
 
-REALTIME = True
-SIM_LENGTH = timedelta(days=365 * 5)
-MARKET_OPEN = datetime.today().replace(hour=0, minute=30, second=0)
+REALTIME    = True
+SIM_LENGTH  = timedelta(days = 365 * 5)
+MARKET_OPEN = datetime.today().replace(hour = 0, minute = 30, second = 0)
 
 # Market parms
 #       min  / max  / std
-SPD = (2.0, 6.0, 0.1)
-PX = (60.0, 150.0, 1)
-FREQ = (12, 36, 50)
+SPD  = (2.0,   6.0,   0.1)
+PX   = (60.0,  150.0, 1)
+FREQ = (12,    36,   50)
 
 # Trades
 
 OVERLAP = 4
 
-
 ################################################################################
 #
 # Test Data
@@ -67,15 +66,13 @@ def bwalk(min, max, std):
         max += normalvariate(0, std)
         yield abs((max % (rng * 2)) - rng) + min
 
-
-def market(t0=MARKET_OPEN):
+def market(t0 = MARKET_OPEN):
     """ Generates a random series of market conditions,
         (time, price, spread).
     """
     for hours, px, spd in zip(bwalk(*FREQ), bwalk(*PX), bwalk(*SPD)):
         yield t0, px, spd
-        t0 += timedelta(hours=abs(hours))
-
+        t0 += timedelta(hours = abs(hours))
 
 def orders(hist):
     """ Generates a random set of limit orders (time, side, price, size) from
@@ -83,9 +80,9 @@ def orders(hist):
     """
     for t, px, spd in hist:
         stock = 'ABC' if random() > 0.5 else 'DEF'
-        side, d = ('sell', 2) if random() > 0.5 else ('buy', -2)
+        side, d  = ('sell', 2) if random() > 0.5 else ('buy', -2)
         order = round(normalvariate(px + (spd / d), spd / OVERLAP), 2)
-        size = int(abs(normalvariate(0, 100)))
+        size  = int(abs(normalvariate(0, 100)))
         yield t, stock, side, order, size
 
 
@@ -93,15 +90,14 @@ def orders(hist):
 #
 # Order Book
 
-def add_book(book, order, size, _age=10):
+def add_book(book, order, size, _age = 10):
     """ Add a new order and size to a book, and age the rest of the book. """
     yield order, size, _age
     for o, s, age in book:
         if age > 0:
             yield o, s, age - 1
 
-
-def clear_order(order, size, book, op=operator.ge, _notional=0):
+def clear_order(order, size, book, op = operator.ge, _notional = 0):
     """ Try to clear a sized order against a book, returning a tuple of
         (notional, new_book) if successful, and None if not.  _notional is a
         recursive accumulator and should not be provided by the caller.
@@ -115,8 +111,7 @@ def clear_order(order, size, book, op=operator.ge, _notional=0):
         elif len(tail) > 0:
             return clear_order(order, -sdiff, tail, op, _notional)
 
-
-def clear_book(buy=None, sell=None):
+def clear_book(buy = None, sell = None):
     """ Clears all crossed orders from a buy and sell book, returning the new
         books uncrossed.
     """
@@ -125,12 +120,11 @@ def clear_book(buy=None, sell=None):
         new_book = clear_order(order, size, sell)
         if new_book:
             sell = new_book[1]
-            buy = buy[1:]
+            buy  = buy[1:]
         else:
             break
     return buy, sell
 
-
 def order_book(orders, book, stock_name):
     """ Generates a series of order books from a series of orders.  Order books
         are mutable lists, and mutating them during generation will affect the
@@ -139,11 +133,10 @@ def order_book(orders, book, stock_name):
     for t, stock, side, order, size in orders:
         if stock_name == stock:
             new = add_book(book.get(side, []), order, size)
-            book[side] = sorted(new, reverse=side == 'buy', key=lambda x: x[0])
+            book[side] = sorted(new, reverse = side == 'buy', key = lambda x: x[0])
         bids, asks = clear_book(**book)
         yield t, bids, asks
 
-
 ################################################################################
 #
 # Test Data Persistence
@@ -157,14 +150,12 @@ def generate_csv():
                 break
             writer.writerow([t, stock, side, order, size])
 
-
 def read_csv():
     """ Read a CSV or order history into a list. """
     with open('test.csv', 'rt') as f:
         for time, stock, side, order, size in csv.reader(f):
             yield dateutil.parser.parse(time), stock, side, float(order), int(size)
 
-
 ################################################################################
 #
 # Server
@@ -174,25 +165,20 @@ class ThreadedHTTPServer(ThreadingMixIn, http.server.HTTPServer):
         shutdown.
     """
     allow_reuse_address = True
-
     def shutdown(self):
         """ Override MRO to shutdown properly. """
         self.socket.close()
         http.server.HTTPServer.shutdown(self)
 
-
 def route(path):
     """ Decorator for a simple bottle-like web framework.  Routes path to the
         decorated method, with the rest of the path as an argument.
     """
-
     def _route(f):
         setattr(f, '__route__', path)
         return f
-
     return _route
 
-
 def read_params(path):
     """ Read query parameters into a dictionary if they are parseable,
         otherwise returns None.
@@ -202,7 +188,6 @@ def read_params(path):
         query = query[1].split('&')
         return dict(map(lambda x: x.split('='), query))
 
-
 def get(req_handler, routes):
     """ Map a request to the appropriate route of a routes instance. """
     for name, handler in routes.__class__.__dict__.items():
@@ -214,27 +199,23 @@ def get(req_handler, routes):
                 req_handler.end_headers()
                 params = read_params(req_handler.path)
                 data = json.dumps(handler(routes, params)) + '\n'
-                req_handler.wfile.write(bytes(data, encoding='utf-8'))
+                req_handler.wfile.write(bytes(data,  encoding = 'utf-8'))
                 return
 
-
-def run(routes, host='0.0.0.0', port=8080):
+def run(routes, host = '0.0.0.0', port = 8080):
     """ Runs a class as a server whose methods have been decorated with
         @route.
     """
-
     class RequestHandler(http.server.BaseHTTPRequestHandler):
         def log_message(self, *args, **kwargs):
             pass
-
         def do_GET(self):
             get(self, routes)
-
     server = ThreadedHTTPServer((host, port), RequestHandler)
-    thread = threading.Thread(target=server.serve_forever)
+    thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print('HTTP server started on port 8080')
+    print ('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
@@ -242,27 +223,25 @@ def run(routes, host='0.0.0.0', port=8080):
     server.start()
     server.waitForThread()
 
-
 ################################################################################
 #
 # App
 
 ops = {
-    'buy': operator.le,
+    'buy':  operator.le,
     'sell': operator.ge,
 }
 
-
 class App(object):
     """ The trading game server application. """
 
     def __init__(self):
-        self._book_1 = dict()
-        self._book_2 = dict()
-        self._data_1 = order_book(read_csv(), self._book_1, 'ABC')
-        self._data_2 = order_book(read_csv(), self._book_2, 'DEF')
+        self._book_1    = dict()
+        self._book_2    = dict()
+        self._data_1    = order_book(read_csv(), self._book_1, 'ABC')
+        self._data_2    = order_book(read_csv(), self._book_2, 'DEF')
         self._rt_start = datetime.now()
-        self._sim_start, _, _ = next(self._data_1)
+        self._sim_start, _, _  = next(self._data_1)
         self.read_10_first_lines()
 
     @property
@@ -284,9 +263,9 @@ class App(object):
                 yield t, bids, asks
 
     def read_10_first_lines(self):
-        for _ in iter(range(10)):
-            next(self._data_1)
-            next(self._data_2)
+            for _ in iter(range(10)):
+                next(self._data_1)
+                next(self._data_2)
 
     @route('/query')
     def handle_query(self, x):
@@ -297,12 +276,12 @@ class App(object):
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         except Exception as e:
-            print("error getting stocks...reinitalizing app")
+            print ("error getting stocks...reinitalizing app")
             self.__init__()
             t1, bids1, asks1 = next(self._current_book_1)
             t2, bids2, asks2 = next(self._current_book_2)
         t = t1 if t1 > t2 else t2
-        print('Query received @ t%s' % t)
+        print ('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -316,20 +295,19 @@ class App(object):
                 'size': asks1[0][1]
             }
         },
-            {
-                'id': x and x.get('id', None),
-                'stock': 'DEF',
-                'timestamp': str(t),
-                'top_bid': bids2 and {
-                    'price': bids2[0][0],
-                    'size': bids2[0][1]
-                },
-                'top_ask': asks2 and {
-                    'price': asks2[0][0],
-                    'size': asks2[0][1]
-                }
-            }]
-
+        {
+            'id': x and x.get('id', None),
+            'stock': 'DEF',
+            'timestamp': str(t),
+            'top_bid': bids2 and {
+                'price': bids2[0][0],
+                'size': bids2[0][1]
+            },
+            'top_ask': asks2 and {
+                'price': asks2[0][0],
+                'size': asks2[0][1]
+            }
+        }]
 
 ################################################################################
 #
@@ -337,6 +315,6 @@ class App(object):
 
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print("No data found, generating...")
+        print ("No data found, generating...")
         generate_csv()
-    run(App())
+    run(App())
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..bb17743 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  ShowGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      ShowGraph: false,
     };
   }
 
@@ -29,18 +31,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.ShowGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
-
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((serverResponds: ServerRespond[]) => {
+          // Update the state by creating a new array of data that consists of
+          // Previous data in the state and the new data from server
+          this.setState({ 
+            data: serverResponds,
+            ShowGraph: true,
+          });
+        });
+        x++;
+        if ( x > 1000 ) {
+          clearInterval(interval);
+        }
+      }, 100);
   }
 
   /**
@@ -71,4 +84,4 @@ class App extends Component<{}, IState> {
   }
 }
 
-export default App;
+export default App;
\ No newline at end of file
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..2185444 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price":"avg",
+      "top_bid_price": "avg",
+      "timestamp":"distinct count"}`)
     }
   }
 
@@ -70,4 +79,4 @@ class Graph extends Component<IProps, {}> {
   }
 }
 
-export default Graph;
+export default Graph;
\ No newline at end of file
-- 
2.34.1

